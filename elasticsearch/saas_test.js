const request = require('request');

const debug = require('debug')('debug');

const chalk = require('chalk');

const requestApi = (option) => {
  return new Promise( (resolve, reject) => {
    request(option, (err, res, body) => {
      if(err) {
        debug(chalk.red('this is err .....................'));
        debug(err);
        return reject(err);
      }
      debug(chalk.green('this is data .....................'));
      // debug(body);
      return typeof body === 'string' ? resolve(JSON.parse(body)) : resolve(body);
    });
  });
};

const userIds = [
//   812000000175,
// 900000000488,
// 900000000489,
// 900000000490,
// 900000000491,
// 900000000492,
// 900000000493,
// 900000000494,
// 900000000495,
// 900000000496,
// 900000000533,
// 900000000534,
// 900000000535,
// 900000000536,
// 900000000584,
// 900000000585,
// 900000000586,
// 900000000587,
// 900000000588,
// 900000000589,
// 900000000590,
// 900000000591,
// 900000000592,
// 900000000593,
// 900000000595,
// 900000000596,
// 900000000648,
// 900000000649,
// 900000001115,
// 900000001144,
// 900000001145,
// 900000001146,
// 900000001147,
// 900000001183,
// 900000001250,
// 900000001284,
// 900000001346,
// 900000001347,
// 900000001348,
// 900000001366,
// 900000001617,
// 900000001809,
// 900000001810,
// 900000001839,
// 900000002679,
// 900000003189,
// 900000003353,
// 900000003354,
// 900000003355,
// 900000003356,
// 900000003499,
// 900000003500,
// 900000005048,
// 900000005052,
// 900000005053,
// 900000005058,
// 900000005084,
// 900000005085,
// 900000005086,
// 900000005224,
// 900000005225,
// 900000005227,
// 900000005233,
// 900000005342,
// 900000005343,
// 900000005344,
// 900000005345,
// 900000005346,
// 900000005347,
// 900000005348,
// 900000005349,
// 900000005350,
// 900000005351,
// 900000005352,
// 900000005353,
// 900000005354,
// 900000005355,
// 900000005356,
// 900000005357,
// 900000005358,
// 900000005359,
// 900000005360,
// 900000005361,
// 900000005362,
// 900000005363,
// 900000005364,
// 900000005365,
// 900000005366,
// 900000005367,
// 900000005626,
// 900000005627,
// 900000005628,
// 900000006114,
// 900000006115,
// 900000006116,
// 900000006117,
// 900000006187,
// 900000006631,
// 900000007489,
// 900000008505,
// 900000008581,
// 900000008582,
// 900000008621,
// 900000008771,
// 900000008772,
// 900000008775,
// 900000008776,
// 900000008784,
// 900000009805,
// 900000009834,
// 900000009835,
// 900000009836,
// 900000009837,
// 900000010028,
// 900000010148,
// 900000010166,
// 900000010167,
// 900000010168,
// 900000010274,
// 900000010388,
// 900000010504,
// 900000010800,
// 900000011032,
// 900000011134,
// 900000011135,
// 900000011645,
// 900000011646,
// 900000011647,
// 900000012955,
// 900000013484,
// 900000013650,
// 900000013651,
// 900000013652,
// 900000013653,
// 900000013654,
// 900000013655,
// 900000013656,
// 900000013657,
// 900000013658,
// 900000013659,
// 900000013660,
// 900000013667,
// 900000022391,
// 900000023888,
// 900000024276,
// 900000024404,
// 900000024405,
// 900000024406,
// 900000024407,
// 900000024408,
// 900000024409,
// 900000024410,
// 900000024411,
// 900000024412,
// 900000024413,
// 900000024414,
// 900000024415,
// 900000024416,
// 900000024417,
// 900000024418,
// 900000024419,
// 900000024420,
// 900000024421,
// 900000024422,
// 900000024423,
// 900000024424,
// 900000024425,
// 900000027109,
// 900000027223,
// 900000027224,
// 900000027237,
// 900000028136,
// 900000028310,
// 900000028327,
// 900000028508,
// 900000028640,
// 900000028641,
// 900000029285,
900000029306,
];

const start_time = (Date.now() - 7 * 24 * 60 * 60 * 1000), end_time = Date.now();

const body = {
  'query': {
    'bool': {
      'filter': [
        // { terms: { userId: userIds}},
        { range: { timestamp: {gte: start_time, lte: end_time}} },
        { range: { userId: {gte: 812000000175, lte: 900000029306 } } }
      ],
      'must_not': {match: { method: 'GET'}},
      'must': {match: {level:'INFO'}}
    }
  },
  'size': 10,
  'profile': true,
};

/**
 * scroll 模式开启，  sort by _doc 即 旧版本的 search_type = scan
 */
const scroll_first = async () => {
  // const body = {
  //   "query": { "match_all": {}},
  //   'size': 7,
  //   "sort": [
  //     "_doc"
  //   ]
  // };
  const url = 'http://116.62.57.148:32101/log_saas_production-*/_search?scroll=10s&_source=url,params&pretty';
  const option = {
    method: 'get',
    url,
    headers: {
      'content-type': 'application/json'
    },
    body: JSON.stringify(body)
  };
  
  return await requestApi(option);
};

/**
 * scroll 模式获取数据，注意每一次的 scroll_id 都会改变
 */
const scroll = async (_scroll_id) => {
  const body = {
    "scroll": "1m",
    "scroll_id": _scroll_id,
  };
  const url = 'http://127.0.0.1:9200/_search/scroll?';
  const option = {
    method: 'get',
    url,
    headers: {
      'content-type': 'application/json'
    },
    body: JSON.stringify(body)
  };
  
  return await requestApi(option);
};


let scroll_id, length = 0;
const run = async () => {
  console.time('search');
  debug(`scroll init....`);

  const ret = await scroll_first();

  const v = ret.profile.shards[0];
  debug(v.searches[0].query[0]);
  // for (let v of ret.profile.shards) {
  //   debug(chalk.yellow('-----------') );
  //   debug(v.searches[0].query[0]);
  // }

  // const { _scroll_id, hits } = await scroll_first();

  // length = hits.hits.length;
  // scroll_id = _scroll_id;

  // let arr = hits.hits, i = 1;

  // while(length > 0) {
  //   debug(`这是第${i}次查询, scroll_id 为 ${scroll_id}`);
  //   const { _scroll_id, hits } = await scroll(scroll_id);
  //   length = hits.hits.length;
  //   scroll_id = _scroll_id;

  //   arr = arr.concat(hits.hits);
  //   i++;
  // }

  // debug(`arr 总数为: ${arr.length}`)

  // console.timeEnd('search');
}

run();